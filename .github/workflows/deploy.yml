name: Deploy to Oracle VM

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up JDK 17
      uses: actions/setup-java@v2
      with:
        java-version: '17'
        distribution: 'temurin'
        server-id: central
        server-username: MAVEN_USERNAME
        server-password: MAVEN_PASSWORD

    # Verify Maven configuration
    - name: Debug Maven Configuration
      run: |
        echo "Verifying Maven configuration..."
        echo "JAVA_HOME: $JAVA_HOME"
        mvn -version
        ls -la ~/.m2 || true
        
    # Create local Maven settings with credentials
    - name: Setup Maven Settings
      run: |
        mkdir -p ~/.m2
        echo '<?xml version="1.0" encoding="UTF-8"?>
        <settings xsi:schemaLocation="http://maven.apache.org/SETTINGS/1.0.0 http://maven.apache.org/xsd/settings-1.0.0.xsd"
                 xmlns="http://maven.apache.org/SETTINGS/1.0.0"
                 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <servers>
            <server>
              <id>central</id>
              <username>${{ secrets.MAVEN_USERNAME }}</username>
              <password>${{ secrets.MAVEN_PASSWORD }}</password>
            </server>
          </servers>
          <mirrors>
            <mirror>
              <id>central</id>
              <name>Maven Central</name>
              <url>https://repo1.maven.org/maven2/</url>
              <mirrorOf>central</mirrorOf>
            </mirror>
          </mirrors>
          <profiles>
            <profile>
              <id>default</id>
              <repositories>
                <repository>
                  <id>central</id>
                  <url>https://repo1.maven.org/maven2</url>
                  <releases>
                    <enabled>true</enabled>
                  </releases>
                  <snapshots>
                    <enabled>false</enabled>
                  </snapshots>
                </repository>
              </repositories>
            </profile>
          </profiles>
          <activeProfiles>
            <activeProfile>default</activeProfile>
          </activeProfiles>
        </settings>' > ~/.m2/settings.xml

    # Build with Maven using explicit credentials
    - name: Build with Maven
      env:
        MAVEN_USERNAME: ${{ secrets.MAVEN_USERNAME }}
        MAVEN_PASSWORD: ${{ secrets.MAVEN_PASSWORD }}
      run: |
        echo "Starting Maven build..."
        mvn -B -X -s ~/.m2/settings.xml clean install -DskipTests || {
          echo "Maven build failed. Checking settings..."
          ls -la ~/.m2
          echo "Current directory contents:"
          ls -la
          exit 1
        }

    # Verify build artifacts
    - name: Verify Build Artifacts
      run: |
        echo "Checking build artifacts..."
        for service in api-gateway eureka-server recommendation-service statistics-service user-tracking-service; do
          if [ -f "$service/target/$service-1.0-SNAPSHOT.jar" ]; then
            echo "$service build successful"
          else
            echo "Error: $service build failed - JAR not found"
            exit 1
          fi
        done

    # Set up Docker buildx
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    # Verify Docker setup
    - name: Verify Docker Configuration
      run: |
        echo "Docker version:"
        docker version
        echo "Docker info:"
        docker info

    # Login to Oracle Container Registry
    - name: Log in to Oracle Container Registry
      uses: docker/login-action@v1
      with:
        registry: ${{ secrets.OCI_REGISTRY }}
        username: ${{ secrets.OCI_USERNAME }}
        password: ${{ secrets.OCI_AUTH_TOKEN }}

    # Build and push Docker images with better error handling
    - name: Build and push Docker images
      env:
        REGISTRY: ${{ secrets.OCI_REGISTRY }}
        NAMESPACE: ${{ secrets.OCI_NAMESPACE }}
      run: |
        echo "Building and pushing Docker images..."
        
        # Function to build and push an image
        build_and_push() {
          local service=$1
          echo "Processing $service..."
          
          # Build image
          echo "Building $service image..."
          docker build -t ${REGISTRY}/${NAMESPACE}/$service:latest -f $service/Dockerfile . || {
            echo "Error building $service image"
            return 1
          }
          
          # Push image
          echo "Pushing $service image..."
          docker push ${REGISTRY}/${NAMESPACE}/$service:latest || {
            echo "Error pushing $service image"
            return 1
          }
          
          echo "$service successfully built and pushed"
          return 0
        }
        
        # Process each service
        services=("api-gateway" "eureka-server" "recommendation-service" "statistics-service" "user-tracking-service")
        for service in "${services[@]}"; do
          build_and_push $service || {
            echo "Failed to process $service"
            exit 1
          }
        done

    # Logout from Docker registry
    - name: Log out from Oracle Container Registry
      if: always()
      run: |
        echo "Logging out from Docker registry..."
        docker logout ${{ secrets.OCI_REGISTRY }}

  deploy:
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    env:
      REGISTRY: ${{ secrets.OCI_REGISTRY }}
      OCI_USERNAME: ${{ secrets.OCI_USERNAME }}
      OCI_AUTH_TOKEN: ${{ secrets.OCI_AUTH_TOKEN }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    # Login to Oracle Container Registry for deployment
    - name: Log in to Oracle Container Registry
      uses: docker/login-action@v1
      with:
        registry: ${{ secrets.OCI_REGISTRY }}
        username: ${{ secrets.OCI_USERNAME }}
        password: ${{ secrets.OCI_AUTH_TOKEN }}

    # Verify VM connection before deployment
    - name: Verify VM Connection
      env:
        ORACLE_VM_IP: ${{ secrets.ORACLE_VM_IP }}
      run: |
        echo "Verifying VM connection..."
        echo "${{ secrets.SSH_PRIVATE_KEY }}" > ssh_key.pem
        chmod 600 ssh_key.pem
        ssh -o StrictHostKeyChecking=no -o ConnectTimeout=10 -i ssh_key.pem opc@${ORACLE_VM_IP} echo "VM connection successful" || {
          echo "Failed to connect to VM"
          exit 1
        }

    - name: Deploy to Oracle VM
      env:
        ORACLE_VM_IP: ${{ secrets.ORACLE_VM_IP }}
      run: |
        echo "Starting deployment..."
        echo "${{ secrets.SSH_PRIVATE_KEY }}" > ssh_key.pem
        chmod 600 ssh_key.pem
        ssh -o StrictHostKeyChecking=no -i ssh_key.pem opc@${ORACLE_VM_IP} << 'EOF'
          echo "Deploying to VM..."
          cd ~/music-analytics/vm-deploy || {
            echo "Failed to change directory"
            exit 1
          }
          
          echo "Logging into Docker registry..."
          docker login ${REGISTRY} -u ${OCI_USERNAME} -p ${OCI_AUTH_TOKEN} || {
            echo "Docker login failed"
            exit 1
          }
          
          echo "Pulling latest images..."
          docker-compose pull || {
            echo "Failed to pull images"
            docker logout ${REGISTRY}
            exit 1
          }
          
          echo "Starting services..."
          docker-compose up -d || {
            echo "Failed to start services"
            docker logout ${REGISTRY}
            exit 1
          }
          
          echo "Logging out from Docker registry..."
          docker logout ${REGISTRY}
          
          echo "Deployment completed successfully"
EOF
        rm -f ssh_key.pem  # Clean up sensitive files

    # Logout from Docker registry
    - name: Log out from Oracle Container Registry
      if: always()
      run: |
        echo "Final cleanup: Logging out from Docker registry..."
        docker logout ${{ secrets.OCI_REGISTRY }}

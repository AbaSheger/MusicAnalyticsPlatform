name: Build and Deploy to VM

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    env:
      ORACLE_VM_IP: ${{ secrets.VM_IP_ADDRESS }}
      DOCKER_REGISTRY: ${{ secrets.OCI_REGISTRY }}
      OCI_USERNAME: ${{ secrets.OCI_USERNAME }}
      OCI_AUTH_TOKEN: ${{ secrets.OCI_AUTH_TOKEN }}
      SSH_KEY_PATH: ~/.ssh/id_rsa
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 8
        uses: actions/setup-java@v3
        with:
          java-version: '8'
          distribution: 'temurin'
          cache: 'maven'

      # Configure Maven for reliability
      - name: Configure Maven settings
        run: |
          mkdir -p ~/.m2
          cat > ~/.m2/settings.xml << EOF
          <settings>
            <mirrors>
              <mirror>
                <id>google-maven-central</id>
                <name>Google Maven Central</name>
                <url>https://maven-central.storage-download.googleapis.com/maven2/</url>
                <mirrorOf>central</mirrorOf>
              </mirror>
            </mirrors>
          </settings>
          EOF

      # Build with retries
      - name: Build with Maven (with retries)
        run: |
          max_attempts=3
          attempt=1
          while [ $attempt -le $max_attempts ]; do
            echo "Build attempt $attempt of $max_attempts"
            if mvn -B clean package -DskipTests; then
              echo "Build succeeded"
              break
            else
              echo "Build failed, retrying..."
              attempt=$((attempt+1))
              sleep 30
            fi
          done
          if [ $attempt -gt $max_attempts ]; then
            echo "Build failed after $max_attempts attempts"
            exit 1
          fi

      # Verify JAR files exist
      - name: Verify build artifacts
        run: |
          echo "Checking JAR files..."
          for service in eureka-server api-gateway recommendation-service statistics-service user-tracking-service; do
            jar_files=$(find $service/target -type f -name "$service*.jar" | grep -v original || echo "")
            if [ -z "$jar_files" ]; then
              echo "ERROR: JAR file for $service not found!"
              find $service/target -type f -name "*.jar" || echo "No JARs found"
              exit 1
            fi
          done

      # Debug step: List all JAR files in target directories
      - name: List target directory contents
        run: |
          echo "Listing all target directories contents..."
          for service in eureka-server api-gateway recommendation-service statistics-service user-tracking-service; do
            echo "=== $service/target contents: ==="
            ls -la $service/target/ || echo "No target directory found"
          done

      # Critical step: Prepare Docker build context
      - name: Prepare Docker build context
        run: |
          # Create vm-deploy directories
          mkdir -p vm-deploy/eureka-server
          mkdir -p vm-deploy/api-gateway
          mkdir -p vm-deploy/recommendation-service
          mkdir -p vm-deploy/statistics-service
          mkdir -p vm-deploy/user-tracking-service
          
          # Copy JAR files to vm-deploy directories
          cp $(find eureka-server/target -name "eureka-server*.jar" | grep -v original) vm-deploy/eureka-server/eureka-server.jar
          cp $(find api-gateway/target -name "api-gateway*.jar" | grep -v original) vm-deploy/api-gateway/api-gateway.jar
          cp $(find recommendation-service/target -name "recommendation-service*.jar" | grep -v original) vm-deploy/recommendation-service/recommendation-service.jar
          cp $(find statistics-service/target -name "statistics-service*.jar" | grep -v original) vm-deploy/statistics-service/statistics-service.jar
          cp $(find user-tracking-service/target -name "user-tracking-service*.jar" | grep -v original) vm-deploy/user-tracking-service/user-tracking-service.jar
          
          # Copy Dockerfiles
          cp eureka-server/Dockerfile vm-deploy/eureka-server/
          cp api-gateway/Dockerfile vm-deploy/api-gateway/
          cp recommendation-service/Dockerfile vm-deploy/recommendation-service/
          cp statistics-service/Dockerfile vm-deploy/statistics-service/
          cp user-tracking-service/Dockerfile vm-deploy/user-tracking-service/
          
          # Verify files were copied
          echo "Verifying copied files:"
          ls -la vm-deploy/*/

      - name: Debug environment variables
        run: |
          echo "Checking environment variables (with sensitive data masked):"
          echo "ORACLE_VM_IP is set: ${{ secrets.VM_IP_ADDRESS != '' }}"
          echo "DOCKER_REGISTRY is set: ${{ secrets.OCI_REGISTRY != '' }}"
          echo "OCI_USERNAME is set: ${{ secrets.OCI_USERNAME != '' }}"
          echo "OCI_AUTH_TOKEN is set: ${{ secrets.OCI_AUTH_TOKEN != '' }}"

      # Fixed SSH key setup step
      - name: Set up SSH key
        run: |
          # Create directory and set permissions
          mkdir -p $HOME/.ssh
          chmod 700 $HOME/.ssh
          
          # Debug directory permissions
          ls -la $HOME/.ssh || echo "Unable to list .ssh directory"
          
          # Check if the SSH key secret is set
          if [ -z "${{ secrets.SSH_PRIVATE_KEY }}" ]; then
            echo "ERROR: SSH_PRIVATE_KEY secret is not set!"
            exit 1
          fi
          
          # Write SSH key file and check it was created
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > $HOME/.ssh/id_rsa
          ls -la $HOME/.ssh/id_rsa || { echo "ERROR: Failed to create SSH key file!"; exit 1; }
          
          # Set proper permissions on the key file
          chmod 600 $HOME/.ssh/id_rsa || { echo "ERROR: Failed to set permissions on SSH key file!"; exit 1; }
          
          # Verify file content (indirectly)
          key_size=$(stat -c %s $HOME/.ssh/id_rsa)
          echo "SSH key file size: $key_size bytes"
          
          # Add VM to known hosts
          if [ -z "${{ secrets.VM_IP_ADDRESS }}" ]; then
            echo "ERROR: VM_IP_ADDRESS secret is not set!"
            exit 1
          fi
          
          # Initialize known_hosts file
          touch $HOME/.ssh/known_hosts
          
          # Add VM to known hosts
          ssh-keyscan -H ${{ secrets.VM_IP_ADDRESS }} >> $HOME/.ssh/known_hosts
          
          # Test SSH connection
          echo "Testing SSH connection..."
          ssh -o BatchMode=yes -o StrictHostKeyChecking=no -i $HOME/.ssh/id_rsa opc@${{ secrets.VM_IP_ADDRESS }} "echo SSH connection successful" || {
            echo "ERROR: SSH connection failed. Debugging information:"
            ls -la $HOME/.ssh/
            echo "Key file content (first line only):"
            head -1 $HOME/.ssh/id_rsa
            exit 1
          }

      - name: Deploy to Oracle VM
        run: |
          # Create directories on VM
          ssh -o StrictHostKeyChecking=no -i $HOME/.ssh/id_rsa opc@${{ secrets.VM_IP_ADDRESS }} "mkdir -p ~/music-analytics/vm-deploy/{eureka-server,api-gateway,recommendation-service,statistics-service,user-tracking-service}"
          
          # Copy JAR files and Dockerfiles to VM
          scp -o StrictHostKeyChecking=no -i $HOME/.ssh/id_rsa vm-deploy/eureka-server/eureka-server.jar vm-deploy/eureka-server/Dockerfile opc@${{ secrets.VM_IP_ADDRESS }}:~/music-analytics/vm-deploy/eureka-server/
          scp -o StrictHostKeyChecking=no -i $HOME/.ssh/id_rsa vm-deploy/api-gateway/api-gateway.jar vm-deploy/api-gateway/Dockerfile opc@${{ secrets.VM_IP_ADDRESS }}:~/music-analytics/vm-deploy/api-gateway/
          scp -o StrictHostKeyChecking=no -i $HOME/.ssh/id_rsa vm-deploy/recommendation-service/recommendation-service.jar vm-deploy/recommendation-service/Dockerfile opc@${{ secrets.VM_IP_ADDRESS }}:~/music-analytics/vm-deploy/recommendation-service/
          scp -o StrictHostKeyChecking=no -i $HOME/.ssh/id_rsa vm-deploy/statistics-service/statistics-service.jar vm-deploy/statistics-service/Dockerfile opc@${{ secrets.VM_IP_ADDRESS }}:~/music-analytics/vm-deploy/statistics-service/
          scp -o StrictHostKeyChecking=no -i $HOME/.ssh/id_rsa vm-deploy/user-tracking-service/user-tracking-service.jar vm-deploy/user-tracking-service/Dockerfile opc@${{ secrets.VM_IP_ADDRESS }}:~/music-analytics/vm-deploy/user-tracking-service/
          
          # Copy docker-compose file
          scp -o StrictHostKeyChecking=no -i $HOME/.ssh/id_rsa cloud-deploy/docker-compose.direct.yml opc@${{ secrets.VM_IP_ADDRESS }}:~/music-analytics/vm-deploy/docker-compose.yml
          
          # Build and run containers
          ssh -o StrictHostKeyChecking=no -i $HOME/.ssh/id_rsa opc@${{ secrets.VM_IP_ADDRESS }} "cd ~/music-analytics/vm-deploy && \
            echo 'Logging in to Docker registry...' && \
            docker login ${{ env.DOCKER_REGISTRY }} -u ${{ env.OCI_USERNAME }} -p ${{ env.OCI_AUTH_TOKEN }} && \
            echo 'Stopping ALL existing containers...' && \
            docker stop $(docker ps -q) || true && \
            docker rm $(docker ps -aq) || true && \
            echo 'Starting new containers...' && \
            docker-compose up -d && \
            echo 'Container status:' && \
            docker-compose ps"

      # Debug command
      - name: Debug on failure
        if: failure()
        run: |
          if [ -f "$HOME/.ssh/id_rsa" ]; then
            ssh -o StrictHostKeyChecking=no -i $HOME/.ssh/id_rsa opc@${{ secrets.VM_IP_ADDRESS }} '
              echo "==== EUREKA SERVER LOGS ====" &&
              docker logs $(docker ps -q -f name=eureka-server) || echo "No eureka-server logs available"
            '
          else
            echo "SSH key file not found, cannot retrieve logs"
          fi
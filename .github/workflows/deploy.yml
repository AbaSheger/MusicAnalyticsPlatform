name: Deploy to Oracle VM

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up JDK 17
      uses: actions/setup-java@v2
      with:
        java-version: '17'
        distribution: 'temurin'
        server-id: central
        server-username: MAVEN_USERNAME
        server-password: MAVEN_PASSWORD

    - name: Debug Maven Configuration
      run: |
        echo "Verifying Maven configuration..."
        echo "JAVA_HOME: $JAVA_HOME"
        mvn -version
        ls -la ~/.m2 || true

    - name: Setup Maven Settings
      run: |
        mkdir -p ~/.m2
        echo '<?xml version="1.0" encoding="UTF-8"?>
        <settings xsi:schemaLocation="http://maven.apache.org/SETTINGS/1.0.0 http://maven.apache.org/xsd/settings-1.0.0.xsd"
                 xmlns="http://maven.apache.org/SETTINGS/1.0.0"
                 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <servers>
            <server>
              <id>central</id>
              <username>${{ secrets.MAVEN_USERNAME }}</username>
              <password>${{ secrets.MAVEN_PASSWORD }}</password>
            </server>
          </servers>
        </settings>' > ~/.m2/settings.xml

    - name: Build with Maven
      env:
        MAVEN_USERNAME: ${{ secrets.MAVEN_USERNAME }}
        MAVEN_PASSWORD: ${{ secrets.MAVEN_PASSWORD }}
      run: |
        echo "Starting Maven build..."
        mvn -B -s ~/.m2/settings.xml clean install -DskipTests || {
          echo "Maven build failed."
          exit 1
        }

    - name: Verify Build Artifacts
      run: |
        echo "Checking build artifacts..."
        for service in api-gateway eureka-server recommendation-service statistics-service user-tracking-service; do
          JAR_PATH=$(find $service/target -type f -name "*.jar" | head -n 1)
          if [ -z "$JAR_PATH" ]; then
            echo "Error: JAR not found for $service"
            exit 1
          fi
          echo "$service build successful: $JAR_PATH"
        done

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Verify Docker Configuration
      run: |
        echo "Docker version:"
        docker version
        echo "Docker info:"
        docker info

    - name: Log in to Oracle Container Registry
      uses: docker/login-action@v1
      with:
        registry: ${{ secrets.OCI_REGISTRY }}
        username: ${{ secrets.OCI_USERNAME }}
        password: ${{ secrets.OCI_AUTH_TOKEN }}

    - name: Build and push Docker images
      env:
        REGISTRY: ${{ secrets.OCI_REGISTRY }}
        NAMESPACE: ${{ secrets.OCI_NAMESPACE }}
      run: |
        echo "Building and pushing Docker images..."
        services=("api-gateway" "eureka-server" "recommendation-service" "statistics-service" "user-tracking-service")
        
        for service in "${services[@]}"; do
          echo "Building $service..."

          # Find the JAR file dynamically
          JAR_FILE=$(find $service/target -type f -name "*.jar" | head -n 1)

          if [ -z "$JAR_FILE" ]; then
            echo "Error: No JAR file found for $service"
            exit 1
          fi

          docker build -t ${REGISTRY}/${NAMESPACE}/$service:latest --build-arg JAR_FILE=$JAR_FILE -f $service/Dockerfile $service
          docker push ${REGISTRY}/${NAMESPACE}/$service:latest
          echo "$service successfully built and pushed."
        done

    - name: Log out from Oracle Container Registry
      if: always()
      run: docker logout ${{ secrets.OCI_REGISTRY }}

  deploy:
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    env:
      REGISTRY: ${{ secrets.OCI_REGISTRY }}
      OCI_USERNAME: ${{ secrets.OCI_USERNAME }}
      OCI_AUTH_TOKEN: ${{ secrets.OCI_AUTH_TOKEN }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Log in to Oracle Container Registry
      uses: docker/login-action@v1
      with:
        registry: ${{ secrets.OCI_REGISTRY }}
        username: ${{ secrets.OCI_USERNAME }}
        password: ${{ secrets.OCI_AUTH_TOKEN }}

    - name: Verify VM Connection
      env:
        ORACLE_VM_IP: ${{ secrets.ORACLE_VM_IP }}
      run: |
        echo "Verifying VM connection..."
        echo "${{ secrets.SSH_PRIVATE_KEY }}" > ssh_key.pem
        chmod 600 ssh_key.pem
        ssh -o StrictHostKeyChecking=no -o ConnectTimeout=10 -i ssh_key.pem opc@${ORACLE_VM_IP} echo "VM connection successful" || exit 1

    - name: Deploy to Oracle VM
      env:
        ORACLE_VM_IP: ${{ secrets.ORACLE_VM_IP }}
        REGISTRY: ${{ secrets.OCI_REGISTRY }}
        OCI_USERNAME: ${{ secrets.OCI_USERNAME }}
        OCI_AUTH_TOKEN: ${{ secrets.OCI_AUTH_TOKEN }}
      run: |
        echo "Starting deployment..."
        echo "${{ secrets.SSH_PRIVATE_KEY }}" > ssh_key.pem
        chmod 600 ssh_key.pem
        
        # Export variables for use in SSH command
        export REGISTRY_VAL=${REGISTRY}
        export USERNAME_VAL=${OCI_USERNAME}
        export TOKEN_VAL=${OCI_AUTH_TOKEN}
        
        # Use EOF instead of 'EOF' to allow variable expansion
        ssh -o StrictHostKeyChecking=no -i ssh_key.pem opc@${ORACLE_VM_IP} <<EOF
          cd ~/music-analytics/vm-deploy || exit 1
          docker login ${REGISTRY_VAL} -u ${USERNAME_VAL} -p ${TOKEN_VAL} || exit 1
          docker-compose pull || exit 1
          docker-compose up -d || exit 1
          docker logout ${REGISTRY_VAL}
          echo "Deployment completed successfully"
EOF
        rm -f ssh_key.pem

    - name: Log out from Oracle Container Registry
      if: always()
      run: docker logout ${{ secrets.OCI_REGISTRY }}

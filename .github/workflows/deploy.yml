name: Deploy to Oracle VM

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up JDK 17
      uses: actions/setup-java@v2
      with:
        java-version: '17'
        distribution: 'temurin'
        server-id: central # This will create settings.xml with these credentials
        server-username: MAVEN_USERNAME
        server-password: MAVEN_PASSWORD

    # Create local Maven settings with credentials
    - name: Setup Maven Settings
      run: |
        mkdir -p ~/.m2
        echo "<?xml version='1.0' encoding='UTF-8'?>
        <settings xsi:schemaLocation='http://maven.apache.org/SETTINGS/1.0.0 http://maven.apache.org/xsd/settings-1.0.0.xsd'
                 xmlns='http://maven.apache.org/SETTINGS/1.0.0'
                 xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance'>
          <servers>
            <server>
              <id>central</id>
              <username>${{ secrets.MAVEN_USERNAME }}</username>
              <password>${{ secrets.MAVEN_PASSWORD }}</password>
            </server>
          </servers>
          <mirrors>
            <mirror>
              <id>central</id>
              <name>Maven Central</name>
              <url>https://repo1.maven.org/maven2/</url>
              <mirrorOf>central</mirrorOf>
            </mirror>
          </mirrors>
        </settings>" > ~/.m2/settings.xml

    # Build with Maven using explicit credentials
    - name: Build with Maven
      env:
        MAVEN_USERNAME: ${{ secrets.MAVEN_USERNAME }}
        MAVEN_PASSWORD: ${{ secrets.MAVEN_PASSWORD }}
      run: |
        mvn -B -s ~/.m2/settings.xml clean install -DskipTests

    # Set up Docker buildx
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    # Login to Docker registry (Oracle Container Registry)
    - name: Log in to Oracle Container Registry
      uses: docker/login-action@v1
      with:
        registry: ${{ secrets.OCI_REGISTRY }}
        username: ${{ secrets.OCI_USERNAME }}
        password: ${{ secrets.OCI_AUTH_TOKEN }}

    # Build and push Docker images with explicit environment variables
    - name: Build and push Docker images
      env:
        REGISTRY: ${{ secrets.OCI_REGISTRY }}
        NAMESPACE: ${{ secrets.OCI_NAMESPACE }}
        OCI_USERNAME: ${{ secrets.OCI_USERNAME }}
        OCI_AUTH_TOKEN: ${{ secrets.OCI_AUTH_TOKEN }}
      run: |
        # Verify Docker login state
        docker login ${REGISTRY} -u ${OCI_USERNAME} -p ${OCI_AUTH_TOKEN}
        
        # Build and push images
        docker build -t ${REGISTRY}/${NAMESPACE}/api-gateway:latest -f api-gateway/Dockerfile .
        docker build -t ${REGISTRY}/${NAMESPACE}/eureka-server:latest -f eureka-server/Dockerfile .
        docker build -t ${REGISTRY}/${NAMESPACE}/recommendation-service:latest -f recommendation-service/Dockerfile .
        docker build -t ${REGISTRY}/${NAMESPACE}/statistics-service:latest -f statistics-service/Dockerfile .
        docker build -t ${REGISTRY}/${NAMESPACE}/user-tracking-service:latest -f user-tracking-service/Dockerfile .
        
        docker push ${REGISTRY}/${NAMESPACE}/api-gateway:latest
        docker push ${REGISTRY}/${NAMESPACE}/eureka-server:latest
        docker push ${REGISTRY}/${NAMESPACE}/recommendation-service:latest
        docker push ${REGISTRY}/${NAMESPACE}/statistics-service:latest
        docker push ${REGISTRY}/${NAMESPACE}/user-tracking-service:latest

  deploy:
    runs-on: ubuntu-latest
    needs: build
    env:
      REGISTRY: ${{ secrets.OCI_REGISTRY }}
      OCI_USERNAME: ${{ secrets.OCI_USERNAME }}
      OCI_AUTH_TOKEN: ${{ secrets.OCI_AUTH_TOKEN }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Deploy to Oracle VM
      env:
        ORACLE_VM_IP: ${{ secrets.ORACLE_VM_IP }}
      run: |
        echo "${{ secrets.SSH_PRIVATE_KEY }}" > ssh_key.pem
        chmod 600 ssh_key.pem
        ssh -o StrictHostKeyChecking=no -i ssh_key.pem opc@${ORACLE_VM_IP} << 'EOF'
          cd ~/music-analytics/vm-deploy
          docker login ${REGISTRY} -u ${OCI_USERNAME} -p ${OCI_AUTH_TOKEN}
          docker-compose pull
          docker-compose up -d
        EOF
        rm -f ssh_key.pem  # Clean up sensitive files
